# Production Dockerfile for Figure Collector Backend
# Multi-stage build for optimized image size

# Stage 1: Build
# Note: Base image runs as root during build (required for compilation)
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev for building)
# Using --ignore-scripts for security to prevent execution of npm scripts
RUN npm ci --ignore-scripts

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Stage 2: Production
# Note: Base image runs as root during setup, switches to non-root for runtime
FROM node:20-alpine AS production

# Build arguments for customization
ARG GITHUB_ORG=rpgoldberg
ARG GITHUB_REPO=figure-collector-backend

# Add labels for better tracking
LABEL org.opencontainers.image.title="Figure Collector Backend"
LABEL org.opencontainers.image.description="Backend API service for Figure Collector"
LABEL org.opencontainers.image.vendor="Figure Collector Services"
LABEL org.opencontainers.image.source="https://github.com/${GITHUB_ORG}/${GITHUB_REPO}"

# Install dumb-init and create non-root user in a single layer
RUN apk add --no-cache dumb-init && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only
# Using --ignore-scripts for security to prevent execution of npm scripts
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

# Copy built application from builder with read-only permissions
# Files are owned by root:root with 644 permissions (read-only for non-root)
COPY --from=builder --chown=root:root --chmod=644 /app/dist ./dist

# Copy any additional required files with read-only permissions
COPY --chown=root:root --chmod=644 .env.example .env.example 2>/dev/null || true

# Create a writable directory for runtime data if needed
RUN mkdir -p /app/data /app/logs && \
    chown nodejs:nodejs /app/data /app/logs && \
    chmod 755 /app/data /app/logs

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/health', (r) => {if(r.statusCode !== 200) throw new Error()})"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "dist/index.js"]