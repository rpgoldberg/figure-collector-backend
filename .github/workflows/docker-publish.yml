name: Build, Scan, and Push Docker Image

on:
  # Automatic triggers
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
    types: [opened, synchronize, reopened]
    tags:
      - 'v*.*.*'  # Semantic version tags like v1.0.0

  # Manual trigger from GitHub Actions UI
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag to use (e.g., v1.0.0, develop, latest)'
        required: false
        default: 'manual'
      rebuild:
        description: 'Force rebuild even if image exists'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags (develop, main)
            type=ref,event=branch

            # PR tags (pr-123)
            type=ref,event=pr

            # Version tags (v1.0.0 -> 1.0.0, latest)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}

            # Manual trigger tag
            type=raw,value=${{ github.event.inputs.tag || 'manual' }},enable=${{ github.event_name == 'workflow_dispatch' }}

            # Git SHA for traceability (only on branch pushes, not PRs)
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'push' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Call the reusable security scanning workflow (only on non-PR events when image is pushed)
  security-scan:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    uses: ./.github/workflows/sbom-security-scan.yml
    with:
      image-tags: ${{ needs.build-and-push.outputs.tags }}
      image-digest: ${{ needs.build-and-push.outputs.digest }}
      registry: ghcr.io
      image-name: ghcr.io/${{ github.repository }}
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
      attestations: write


  # Security scan for PRs (local image)
  pr-security-scan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Check package-lock.json in git
        run: |
          echo "=== Checking cross-spawn version in checked-out package-lock.json ==="
          grep -A3 '"node_modules/cross-spawn"' package-lock.json | grep '"version"' || echo "Not found in lock file"
          echo "=== Git HEAD ==="
          git log -1 --oneline
          echo "=== Files changed in last commit ==="
          git show --stat HEAD

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image locally
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          load: true
          tags: local-scan:latest
          build-args: |
            CACHE_BUST=${{ github.sha }}
          provenance: false
          # Temporarily disabled cache to force fresh build
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          no-cache: true

      - name: Debug - Inspect built image
        run: |
          echo "=== Files in /app ==="
          docker run --rm local-scan:latest ls -la /app/
          echo "=== Check if package-lock.json exists in image ==="
          docker run --rm local-scan:latest sh -c "ls /app/package-lock.json 2>&1" || echo "NOT FOUND (good)"
          echo "=== Count node_modules ==="
          docker run --rm local-scan:latest sh -c "ls /app/node_modules 2>/dev/null | wc -l"
          echo "=== Check for cross-spawn in image ==="
          docker run --rm local-scan:latest sh -c "ls /app/node_modules | grep -i cross || echo 'NOT FOUND (good)'"

      - name: Install security tools
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          syft local-scan:latest -o spdx-json > sbom.spdx.json
          syft local-scan:latest -o cyclonedx-json > sbom.cyclonedx.json

      - name: Run vulnerability scan
        run: |
          grype local-scan:latest --config .grype.yaml --fail-on high

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json
          retention-days: 30
