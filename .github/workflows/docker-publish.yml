name: Build and Push Docker Image

on:
  # Automatic triggers
  push:
    branches: [develop, main]
    tags:
      - 'v*.*.*'  # Semantic version tags like v1.0.0

  # Manual trigger from GitHub Actions UI
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag to use (e.g., v1.0.0, develop, latest)'
        required: false
        default: 'manual'
      rebuild:
        description: 'Force rebuild even if image exists'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags (develop, main)
            type=ref,event=branch

            # PR tags (pr-123)
            type=ref,event=pr

            # Version tags (v1.0.0 -> 1.0.0, latest)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}

            # Manual trigger tag
            type=raw,value=${{ github.event.inputs.tag || 'manual' }},enable=${{ github.event_name == 'workflow_dispatch' }}

            # Git SHA for traceability
            type=sha,prefix={{branch}}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Generate SBOM for the container image
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate container SBOM
        run: |
          # Get the first tag from the list for SBOM generation
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Generating SBOM for image: ${FIRST_TAG}"

          # Generate SBOM in both SPDX and CycloneDX formats
          syft "${FIRST_TAG}" -o spdx-json > sbom-spdx.json
          syft "${FIRST_TAG}" -o cyclonedx-json > sbom-cyclonedx.json

          # Also generate a human-readable format
          syft "${FIRST_TAG}" -o table > sbom-table.txt

          echo "SBOM generated successfully"
          echo "Container packages found: $(syft "${FIRST_TAG}" -q | wc -l)"

      # Attach SBOM to the container image as attestation
      - name: Attach SBOM attestation
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: sbom-spdx.json
          push-to-registry: true

      # Upload SBOMs as artifacts for later retrieval
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.run_id }}
          path: |
            sbom-*.json
            sbom-*.txt
          retention-days: 90

      # Scan for vulnerabilities using Grype
      - name: Scan image for vulnerabilities
        run: |
          # Install Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

          # Scan using the SBOM
          echo "🔍 Scanning for vulnerabilities..."
          grype sbom:sbom-spdx.json -o table > vulnerability-report.txt || true

          # Also create a JSON report for parsing
          grype sbom:sbom-spdx.json -o json > vulnerability-report.json || true

          # Display summary
          echo "Vulnerability scan complete"
          if [ -s vulnerability-report.txt ]; then
            head -100 vulnerability-report.txt
          fi

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ github.run_id }}
          path: |
            vulnerability-*.txt
            vulnerability-*.json
          retention-days: 90

      # Optional: Submit SBOM to dependency track or other vulnerability management system
      - name: Display SBOM summary
        run: |
          echo "📦 SBOM Generation Complete"
          echo "================================"
          echo "Image: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "SBOM Formats: SPDX, CycloneDX"
          echo "Attestation: Attached to image"
          echo "================================"
          echo "Package Summary:"
          head -30 sbom-table.txt
